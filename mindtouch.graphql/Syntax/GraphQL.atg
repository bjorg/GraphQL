/*
 * MindTouch GraphQL 
 * Copyright (C) 2006-2016 MindTouch, Inc.
 * www.mindtouch.com  oss@mindtouch.com
 *
 * For community documentation and downloads visit mindtouch.com;
 * please review the licensing section.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// COCO Bugs
// * case-sensitive in unicode constants (e.g. '\u00AD' doesn't work)

using System.Collections.Generic;
using System.Linq;

COMPILER GraphQL

	//--- Fields ---
	internal GraphSyntaxDocument Result;

CHARACTERS
	tab = '\t'.
	nl = '\n'.
	cr = '\r'.
	underscore = '_'.
	comma = ','.
	letter = 'a'..'z'.
	digit = '0'..'9'.
	hex = digit + "abcdef".
	doublequotechar  = ANY - '"' - '\\'.
	commentchar = ANY - '\r' - '\n'.

TOKENS

	name = ( underscore | letter ) { letter | digit | underscore }.
		
	string = 
		"\"" { 
			doublequotechar
			| "\\\'" | "\\\"" | "\\\\" | "\\/" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
			| "\\u" hex hex hex hex
		} "\""
		.
	
	number =
		[ "-" | "+" ] (
			digit { digit } 
			| "." digit { digit } [ "e" [ "+" | "-" ] digit { digit }]
			| digit { digit } ( "." digit { digit } [ "e" [ "+" | "-" ] digit { digit }] | "e" [ "+" | "-" ] digit { digit })
		)
		.

	// reserved keywords
	true = "true".
	false = "false".
	null = "null".

PRAGMAS	
	comment 
		= '#' { commentchar } [ "\r\n" | "\r" | "\n" ]
		.

IGNORE nl + cr + tab + comma

PRODUCTIONS

	GraphQL
		= Document<out Result>
		.

	Document<out GraphSyntaxDocument doc>											(.
																						var definitions = new List<AGraphSyntaxDefinition>();
																						AGraphSyntaxDefinition definition = null;
																					.)
		= Definition<out definition>												(. definitions.Add(definition); .)
		{ 
			Definition<out definition>												(. definitions.Add(definition); .)
		}																			(. doc = new GraphSyntaxDocument(definitions); .)
		.

	Definition<out AGraphSyntaxDefinition definition>								(. definition = null; .)
		= OperationDefinition<out definition>
		| FragmentDefinition
		.

	OperationDefinition<out AGraphSyntaxDefinition definition>						(. 
																						definition = null;
																						GraphSyntaxSelectionSet selectionSet = null; 
																						var type = GraphSyntaxOperationType.Query;
																						string name = null;
																						var variables = Enumerable.Empty<GraphSyntaxOperationDefinition.Variable>();
																						var directives = Enumerable.Empty<GraphSyntaxDirective>();
																					.)
		= (
			SelectionSet<out selectionSet>
			| 
			OperationType<out type>
			[ Name<out name> ] 
			[ VariableDefinitions ] 
			[ Directives ] 
			SelectionSet<out selectionSet>
		)																			(. 
																						definition = new GraphSyntaxOperationDefinition(
																							type,
																							name,
																							variables,
																							directives,
																							selectionSet
																						); 
																					.)
		.

	OperationType<out GraphSyntaxOperationType type>								(. type = GraphSyntaxOperationType.Query; .)
		= "query"																	(. type = GraphSyntaxOperationType.Query; .)
		| "mutation"																(. type = GraphSyntaxOperationType.Mutation; .)
		.

	SelectionSet<out GraphSyntaxSelectionSet set>									(. 
																						var selections = new List<AGraphSyntaxSelection>();
																						AGraphSyntaxSelection selection = null;
																					.)
		=
		"{"
			Selection<out selection>												(. selections.Add(selection); .)
			{ 
				Selection<out selection>											(. selections.Add(selection); .)
			} 
		"}"																			(. set = new GraphSyntaxSelectionSet(selections); .)
		.

	Selection<out AGraphSyntaxSelection selection>									(. selection = null; .)
		= Field<out selection>
		| "..." (
			FragmentSpread
			InlineFragment
		)
		.

	Field<out AGraphSyntaxSelection field>										(.
																						string prefix = null;
																						string name = null;
																						var arguments = Enumerable.Empty<GraphSyntaxArgument>();
																						var directives = Enumerable.Empty<GraphSyntaxDirective>();
																						GraphSyntaxSelectionSet set = null;
																					.)
		=
		Name<out prefix> 
		[ ":" Name<out name> ] 
		[ Arguments ] 
		[ Directives ] 
		[ SelectionSet<out set> ]													(.
																						field = new GraphSyntaxSelectionField(
																							prefix, 
																							name ?? prefix, 
																							arguments, 
																							directives, 
																							set
																						);
																					.)
		.

	Arguments =
		'(' Argument { Argument } ')'
		.

	Argument																		(. AGraphSyntaxValue value = null; .)
		=
		name ':' Value<out value>
		.

	FragmentSpread =
		FragmentName [ Directives ]
		.

	InlineFragment																	(. GraphSyntaxSelectionSet set = null; .)
		=
		"on" NamedType [ Directives ] SelectionSet<out set>
		.

	FragmentDefinition																(. GraphSyntaxSelectionSet set = null; .)
		=
		"fragment" FragmentName "on" NamedType [ Directives ] SelectionSet<out set>
		.

	FragmentName =
		name
		.
		
	VariableDefinitions =
		"(" VariableDefinition { VariableDefinition } ")"
		.

	VariableDefinition =															(. AGraphSyntaxValue value = null; .)
		Variable<out value> ":" Type [ "=" Value<out value> ]
		.

	Type =
		NamedType [ "!" ]
		| ListType [ "!" ]
		.

	NamedType =
		name
		.

	ListType =
		"[" Type "]"
		.

	Directives =
		Directive { Directive }
		.

	Directive =
		"@" name [ Arguments ]
		.

	Value<out AGraphSyntaxValue value>												(. value = null; .)
		= Boolean<out value>
		| Number<out value>
		| String<out value>
		| Enum<out value>
		| Variable<out value>
		| List<out value>
		| InputObject<out value>
		.

	Boolean<out AGraphSyntaxValue value>											(. value = null; .)
		= true																		(. value = new GraphSyntaxLiteralBool(true); .)
		| false																		(. value = new GraphSyntaxLiteralBool(false); .)
		.

	Number<out AGraphSyntaxValue value> =
		number																		(. value = Utils.ToLiteralNumber(t.val); .)
		.

	String<out AGraphSyntaxValue value> =
		string																		(. value = Utils.ToLiteralString(t.val); .)
		.

	Enum<out AGraphSyntaxValue value>												(. string name = null; .)
		=
		Name<out name>																(. value = new GraphSyntaxLiteralEnum(name); .)
		.

	Variable<out AGraphSyntaxValue value>											(. string name = null; .)
		=
		"$" Name<out name>															(. value = new GraphSyntaxVariable(name); .)
		.

	List<out AGraphSyntaxValue value>												(. value = null; var values = new List<AGraphSyntaxValue>(); .)
		=
		"[" { 
			Value<out value>														(. values.Add(value); .)
		} "]"																		(. value = new GraphSyntaxList(values); .)
		.

	InputObject<out AGraphSyntaxValue value>										(. 
																						value = null; 
																						var fields = new List<GraphSyntaxInputObject.Field>(); 
																						GraphSyntaxInputObject.Field field = null;
																					.)
		=
		"{" 
			InputObjectField<out field>												(. fields.Add(field); .)
			{ 
				InputObjectField<out field>											(. fields.Add(field); .)
			} 
		"}"																			(. value = new GraphSyntaxInputObject(fields); .)
		.

	InputObjectField<out GraphSyntaxInputObject.Field field>						(. AGraphSyntaxValue value = null; string name = null; .)
		=
		Name<out name> "=" Value<out value>											(. field = new GraphSyntaxInputObject.Field(name, value); .)
		.

	Name<out string name>
		= name																		(. name = t.val; .)
		.

END GraphQL.
